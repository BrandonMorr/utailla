<?php
/**
 * @file
 * Main hooks.
 */

// Objects.
define('UTAILLA_COLLECTION', 'ailla:collection_collection');
define('UTAILLA_ORG_COLLECTION', 'ailla:organization_collection');
define('UTAILLA_ORG_CMODEL', 'ailla:organizationCModel');
define('UTAILLA_RESOURCE_CMODEL', 'ailla:resourceCModel');
define('UTAILLA_CONTRIBUTOR_COLLECTION', 'ailla:contributor_collection');
define('UTAILLA_CONTRIBUTOR_CMODEL', 'ailla:contributorCModel');
define('UTAILLA_LANGUAGE_CMODEL', 'ailla:languageCModel');
define('UTAILLA_COUNTRY_CMODEL', 'ailla:countryCModel');
// Migrations.
define('UTAILLA_USER_MIGRATION', 'UtaillaUser');
define('UTAILLA_CONTACT_MIGRATION', 'UtaillaContact');
define('UTAILLA_LIMIT_FOR_RESOURCE_IMPORT', 100);
// Relationships.
define('UTAILLA_USER_REL', 'hasAssociatedUser');
define('UTAILLA_CONTACT_REL', 'hasAssociatedContact');
// Autocomplete paths.
define('UTAILLA_PARENT_LANGUAGE_AUTOCOMPLETE', 'utailla/autocomplete/parentlanguage');
define('UTAILLA_COUNTRY_AUTOCOMPLETE', 'utailla/autocomplete/countries');
define('UTAILLA_CONTRIBUTOR_AUTOCOMPLETE', 'utailla/autocomplete/contributor');
define('UTAILLA_ORGANIZATION_AUTOCOMPLETE', 'utailla/autocomplete/organization');

// Second duration of media file authorization.
const UTAILLA_AUTHORIZATION_DURATION = 600;

// Restriction levels.
const UTAILLA_RESTRICTION_LEVEL_1 = 0;
const UTAILLA_RESTRICTION_LEVEL_2 = 1;
const UTAILLA_RESTRICTION_LEVEL_3 = 2;
const UTAILLA_RESTRICTION_LEVEL_4 = 3;

// Time in microseconds to slow each object's ingest by in an attempt to give
// Fedora more time for disk I/O.
const UTAILLA_USLEEP = 1500000;

/**
 * Implements hook_menu().
 */
function utailla_menu() {
  $items = array();
  $items[UTAILLA_PARENT_LANGUAGE_AUTOCOMPLETE] = array(
    'title' => 'Autocomplete parent language callback',
    'description' => 'Autocomplete to get a language object\'s title.',
    'file' => 'includes/utailla.autocomplete.inc',
    'page callback' => 'utailla_title_by_model_autocomplete',
    'page arguments' => array(3, UTAILLA_LANGUAGE_CMODEL),
    'access arguments' => array(ISLANDORA_METADATA_EDIT),
    'type' => MENU_CALLBACK,
  );
  $items[UTAILLA_COUNTRY_AUTOCOMPLETE] = array(
    'title' => 'Autocomplete country callback',
    'description' => 'Autocomplete to get a country object\'s title.',
    'file' => 'includes/utailla.autocomplete.inc',
    'page callback' => 'utailla_title_by_model_autocomplete',
    'page arguments' => array(3, UTAILLA_COUNTRY_CMODEL),
    'access arguments' => array(ISLANDORA_METADATA_EDIT),
    'type' => MENU_CALLBACK,
  );
  $items[UTAILLA_CONTRIBUTOR_AUTOCOMPLETE] = array(
    'title' => 'Autocomplete collector/depositor callback',
    'description' => 'Autocomplete to get a contributor object\'s title.',
    'file' => 'includes/utailla.autocomplete.inc',
    'page callback' => 'utailla_title_by_model_autocomplete',
    'page arguments' => array(3, UTAILLA_CONTRIBUTOR_CMODEL),
    'access arguments' => array(ISLANDORA_METADATA_EDIT),
    'type' => MENU_CALLBACK,
  );
  $items['islandora/object/%islandora_object/manage/utailla_access_levels'] = array(
    'title' => 'Access Levels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('utailla_access_level_form', 2),
    'access callback' => 'islandora_object_access',
    'access arguments' => array('administer utailla access levels', 2),
    'file' => 'includes/access_levels.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora/object/%islandora_object/manage/overview/add_resource'] = array(
    'title' => 'Add an object to this Resource',
    'page callback' => 'utailla_resource_ingest_action',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/ingest.form.inc',
    'access callback' => 'utailla_resource_ingest_access',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Implements hook_islandora_required_objects().
 */
function utailla_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'utailla', 'includes/utilities');
  $module_path = drupal_get_path('module', 'utailla');

  // Language content model.
  $language_cmodel = $connection->repository->constructObject(UTAILLA_LANGUAGE_CMODEL);
  $language_cmodel->owner = 'fedoraAdmin';
  $language_cmodel->label = 'Ailla Language Content Model';
  $language_cmodel->models = 'fedora-system:ContentModel-3.0';
  utailla_set_ds_composite($language_cmodel, 'language_composite_model.xml');

  // Language collection.
  $language_collection = $connection->repository->constructObject('ailla:language_collection');
  $language_collection->owner = 'fedoraAdmin';
  $language_collection->label = 'Language Collection';
  $language_collection->models = 'islandora:collectionCModel';
  $language_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  utailla_set_collection_policy($language_collection, 'language_collection_policy.xml');
  utailla_set_default_thumb($language_collection);

  // Country content model.
  $country_cmodel = $connection->repository->constructObject(UTAILLA_COUNTRY_CMODEL);
  $country_cmodel->owner = 'fedoraAdmin';
  $country_cmodel->label = 'Ailla Country Content Model';
  $country_cmodel->models = 'fedora-system:ContentModel-3.0';
  utailla_set_ds_composite($country_cmodel, 'country_composite_model.xml');

  // Country collection.
  $country_collection = $connection->repository->constructObject('ailla:country_collection');
  $country_collection->owner = 'fedoraAdmin';
  $country_collection->label = 'Country Collection';
  $country_collection->models = 'islandora:collectionCModel';
  $country_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  utailla_set_collection_policy($country_collection, 'country_collection_policy.xml');
  utailla_set_default_thumb($country_collection);

  // Collection collection.
  $collection_collection = $connection->repository->constructObject(UTAILLA_COLLECTION);
  $collection_collection->owner = 'fedoraAdmin';
  $collection_collection->label = 'Collections';
  $collection_collection->models = 'islandora:collectionCModel';
  $collection_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  utailla_set_collection_policy($collection_collection, 'collection_collection_policy.xml');

  // Organization collection.
  $org_collection = $connection->repository->constructObject(UTAILLA_ORG_COLLECTION);
  $org_collection->owner = 'fedoraAdmin';
  $org_collection->label = 'Organizations';
  $org_collection->models = 'islandora:collectionCModel';
  $org_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  utailla_set_default_thumb($org_collection);
  utailla_set_collection_policy($org_collection, 'organization_collection_policy.xml');

  // Organization content model.
  $org_cmodel = $connection->repository->constructObject(UTAILLA_ORG_CMODEL);
  $org_cmodel->owner = 'fedoraAdmin';
  $org_cmodel->label = 'Organization Content Model';
  $org_cmodel->models = 'fedora-system:ContentModel-3.0';
  utailla_set_ds_composite($org_cmodel, 'organization_composite_model.xml');

  // Resource content model.
  $resource_cmodel = $connection->repository->constructObject(UTAILLA_RESOURCE_CMODEL);
  $resource_cmodel->owner = 'fedoraAdmin';
  $resource_cmodel->label = 'Resource Content Model';
  $resource_cmodel->models = 'fedora-system:ContentModel-3.0';
  utailla_set_ds_composite($resource_cmodel, 'resource_composite_model.xml');

  // Contributor collection.
  $contributor_collection = $connection->repository->constructObject(UTAILLA_CONTRIBUTOR_COLLECTION);
  $contributor_collection->owner = 'fedoraAdmin';
  $contributor_collection->label = 'Contributors';
  $contributor_collection->models = 'islandora:collectionCModel';
  $contributor_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  utailla_set_default_thumb($contributor_collection);
  utailla_set_collection_policy($contributor_collection, 'contributor_collection_policy.xml');

  // Contributor content model.
  $contributor_cmodel = $connection->repository->constructObject(UTAILLA_CONTRIBUTOR_CMODEL);
  $contributor_cmodel->owner = 'fedoraAdmin';
  $contributor_cmodel->label = 'Contributor Content Model';
  $contributor_cmodel->models = 'fedora-system:ContentModel-3.0';
  utailla_set_ds_composite($contributor_cmodel, 'contributor_composite_model.xml');

  return array(
    'utailla' => array(
      'title' => t('AILLA'),
      'objects' => array(
        $language_cmodel,
        $language_collection,
        $country_cmodel,
        $country_collection,
        $org_collection,
        $org_cmodel,
        $contributor_collection,
        $contributor_cmodel,
        $collection_collection,
        $resource_cmodel,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function utailla_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'utailla');
  return array(
    'Country MADS form' => array(
      'form_file' => "$module_path/xml/country_mads_form.xml",
    ),
    'Language form' => array(
      'form_file' => "$module_path/xml/language_form.xml",
    ),
    'Ailla Collection MODS form' => array(
      'form_file' => "$module_path/xml/collection_form.xml",
    ),
    'Ailla Resource MODS form' => array(
      'form_file' => "$module_path/xml/resource_form.xml",
    ),
    'Ailla Contributor MADS form' => array(
      'form_file' => "$module_path/xml/contributor_form.xml",
    ),
    'Ailla Organization MADS form' => array(
      'form_file' => "$module_path/xml/organization_form.xml",
    ),
    'Ailla Audio MODS form' => array(
      'form_file' => "$module_path/xml/audio_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function utailla_islandora_xml_form_builder_form_associations() {
  return array(
    'ailla_country_mads_form' => array(
      'content_model' => UTAILLA_COUNTRY_CMODEL,
      'form_name' => 'Country MADS form',
      'dsid' => 'MADS',
      'title_field' => array('authority', 'english_name'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_language_form' => array(
      'content_model' => UTAILLA_LANGUAGE_CMODEL,
      'form_name' => 'Language form',
      'dsid' => 'LANGUAGE',
      'title_field' => array('name_english'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_collection_form' => array(
      'content_model' => 'islandora:collectionCModel',
      'form_name' => 'Ailla Collection MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfoEnglish', 'title'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_resource_form' => array(
      'content_model' => UTAILLA_RESOURCE_CMODEL,
      'form_name' => 'Ailla Resource MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfoEnglish', 'title'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_contributor_form' => array(
      'content_model' => UTAILLA_CONTRIBUTOR_CMODEL,
      'form_name' => 'Ailla Contributor MADS form',
      'dsid' => 'MADS',
      'title_field' => FALSE,
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_organization_form' => array(
      'content_model' => UTAILLA_ORG_CMODEL,
      'form_name' => 'Ailla Organization MADS form',
      'dsid' => 'MADS',
      'title_field' => array('authority', 'name', 'namePart'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
    'ailla_audio_form' => array(
      'content_model' => 'islandora:sp-audioCModel',
      'form_name' => 'Ailla Audio MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => FALSE,
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function utailla_permission() {
  $permission = array();

  $permission['administer utailla access levels'] = array(
    'title' => t('Administer Access Levels'),
    'description' => t('Permit access to the "Access Levels" form on collections, resources and files.'),
  );

  return $permission;
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * Brings restriction up to Level 1.
 */
function utailla_islandora_object_ingested(AbstractObject $object) {
  module_load_include('inc', 'utailla', 'includes/utilities');
  module_load_include('inc', 'utailla', 'includes/db');
  module_load_include('inc', 'utailla', 'includes/access_levels.form');

  usleep(UTAILLA_USLEEP);
  // See if this object already has a restriction and if it does ignore it.
  $restriction = FALSE;
  if (!utailla_get_restriction($object->id)) {
    // See if the collection the media file is a part of has a restriction set.
    // XXX: Is technically possible for a media file to not be part of a
    // resource.
    $ignore_models = array_merge(utailla_collection_like_models(), array('fedora-system:ContentModel-3.0'));
    if (!array_intersect($ignore_models, $object->models)) {
      $parent_rels = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
      $parent_rels = reset($parent_rels);
      $parent_pid = $parent_rels['object']['value'];
      $parent_object = islandora_object_load($parent_pid);
      // See if this a collection or if we need to go one more level.
      if (in_array('islandora:collectionCModel', $object->models)) {
        $restriction = utailla_get_collection_restriction($parent_object->id);
      }
      else {
        $grandparent_rels = $parent_object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
        $grandparent_rels = reset($grandparent_rels);
        $grandparent_pid = $grandparent_rels['object']['value'];
        $restriction = utailla_get_collection_restriction($grandparent_pid);
      }
      if ($restriction) {
        utailla_set_restriction($object, array(
          'level' => UTAILLA_RESTRICTION_LEVEL_1,
          'hint' => $restriction['hint'],
          'password' => $restriction['password'],
        ));
      }
    }
    if (!$restriction) {
      utailla_set_restriction($object, array('level' => UTAILLA_RESTRICTION_LEVEL_1));
    }
  }
}

/**
 * Implements hook_block_info().
 */
function utailla_block_info() {
  return array(
    'utailla_object_credentials' => array(
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'islandora/object/*',
      'cache' => DRUPAL_NO_CACHE,
      'info' => t('Object Credential Input'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function utailla_block_view($delta = '') {
  $to_render = array();

  switch ($delta) {
    case 'utailla_object_credentials':
      module_load_include('inc', 'utailla', 'includes/object_credentials');
      module_load_include('inc', 'utailla', 'includes/db');
      module_load_include('inc', 'utailla', 'includes/utilities');
      $object = menu_get_object('islandora_object', 2);
      $restriction = utailla_get_restriction($object->id);
      if ($object &&
        isset($restriction['password']) && $restriction['password'] &&
        !utailla_user_media_file_current_authorization($object->id)) {

        $to_render['subject'] = t('Unlock Object');
        $to_render['content'] = drupal_get_form(
          'utailla_object_credentials_form',
          $object
        );
      }
      break;
  }
  return $to_render;
}

/**
 * Implements hook_cron().
 *
 * Cleans out of date restrictions and authorizations.
 */
function utailla_cron() {
  module_load_include('inc', 'utailla', 'includes/db');
  utailla_remove_outdated_media_file_authorizations();
  utailla_update_outdated_media_file_restrictions();
}

/**
 * Implements hook_islandora_datastream_access().
 */
function utailla_islandora_datastream_access($op, $datastream, $user) {
  module_load_include('inc', 'utailla', 'includes/utilities');
  module_load_include('inc', 'utailla', 'includes/db');

  $lockable_dsids = utailla_lockable_dastastreams();
  $pid = $datastream->parent->id;
  $restriction = utailla_get_restriction($pid);
  if (in_array($datastream->id, $lockable_dsids) &&
    $restriction['level'] &&
    user_is_logged_in() &&
    !utailla_user_media_file_current_authorization($pid)) {

    return FALSE;

  }

  return NULL;
}

/**
 * Language Validation for Ailla Collection MODS Form.
 */
function utailla_validate_language_is_in_collection_language($element, &$form_state) {
  $collection_languages = array();
  foreach ($form_state['values']['languages_uri'] as $language) {
    if (!empty($language['language'])) {
      $collection_languages[] = $language['language'];
    }
  }
  if (isset($element['#value'])) {
    if (($element['#value'] && empty($collection_languages)) || ($element['#value'] && !empty($collection_languages) && !in_array($element['#value'], $collection_languages))) {
      form_error($element, t('@lang is not one of the current collection languages.', array('@lang' => $element['#value'])));
    }
  }
}

/**
 * Used by Ailla forms to set language label from hidden PID field.
 */
function utailla_convert_language_pid_to_title($form, $form_state) {
  global $base_url;
  if (isset($form['language_pid']['#value'])) {
    $pid = str_replace("$base_url/islandora/object/", "", $form['language_pid']['#value']);
    $obj = islandora_object_load($pid);
    if ($obj) {
      $form['language']['#value'] = $obj->label;
    }
  }
  return $form;
}

/**
 * Used by Ailla Collection MODS Form to country label from hidden PID field.
 */
function utailla_convert_country_pid_to_title($form, $form_state) {
  global $base_url;
  if (isset($form['country_pid']['#value'])) {
    $pid = str_replace("$base_url/islandora/object/", "", $form['country_pid']['#value']);
    $obj = islandora_object_load($pid);
    if ($obj) {
      $form['country_name']['#value'] = $obj->label;
    }
  }
  return $form;
}

/**
 * Used by Ailla MADS form to set organization label from hidden PID field.
 */
function utailla_convert_organization_pid_to_title($form, $form_state) {
  global $base_url;
  if (isset($form['organization_pid']['#value'])) {
    $pid = str_replace("$base_url/islandora/object/", "", $form['organization_pid']['#value']);
    $obj = islandora_object_load($pid);
    if ($obj) {
      $form['organization']['#value'] = $obj->label;
    }
  }
  return $form;
}

/**
 * Used by Ailla forms to set label from hidden PID field.
 */
function utailla_collection_build_uri_on_validate($element, &$form_state) {
  global $base_url;
  if (!empty($element['#value']) && strpos($element['#value'], $base_url) === FALSE) {
    module_load_include('inc', 'utailla', 'includes/utilities');
    form_set_value($element, utailla_get_uri_from_pid($element['#value']), $form_state);
  }
}

/**
 * Used by Ailla Media forms to set the date in provenance fields.
 */
function utailla_update_provenance_dates($form, $form_state) {
  $date = new DateTime();
  $date = $date->format($date::W3C);
  $form['date_modified']['#value'] = $date;
  $form_id = isset($form_state['values']['form_id']) ? $form_state['values']['form_id'] : $form_state['build_info']['form_id'];
  if ($form_id == 'xml_form_builder_ingest_form' || 'islandora_ingest_form') {
    $form['date_archived']['#value'] = $date;
  }
  return $form;
}

/**
 * Used by Ailla Media forms to update the Spanish content_type.
 */
function utailla_update_spanish_content_type_on_validate($element, &$form_state) {
  $mapping = array(
    'annotation' => 'anotación',
    'commentary' => 'comentario',
    'context' => 'contexto',
    'guide' => 'guía',
    'illustration' => 'ilustración',
    'interlinearization' => 'interlinearización',
    'interpretation' => 'interpretación',
    'photo' => 'foto',
    'primary text' => 'texto primario',
    'sample' => 'muestra',
    'transcription' => 'transcripción',
    'transcription & translation' => 'transcripción & traducción',
    'translation' => 'traducción',
  );
  $spanish = is_null($form_state['values']['content_type_eng']) ? NULL : $mapping[$form_state['values']['content_type_eng']];
  form_set_value($element, $spanish, $form_state);
}

/**
 * Used by Ailla Media forms to update the Spanish original_medium.
 */
function utailla_update_spanish_original_medium_on_validate($element, &$form_state) {
  // Only values that differ between Spanish and English are included; any
  // other values are carried over outright.
  $mapping = array(
    'audio:cassette' => 'audio:casette',
    'audio:open-reel' => 'audio:carriete abierto',
    'image:analog' => 'imágen:análogo',
    'image:digital' => 'imágen:digital',
    'other' => 'otro',
    'text:archivable digital' => 'texto:digital archivable',
    'text:Excel' => 'texto:Excel',
    'text:manuscript' => 'texto:manuscrito',
    // 15. text:publicado (sic).
    'text:published' => 'text:publicado',
    'text:Shoe/Toolbox' => 'texto:Shoe/Toolbox',
    'text:unarchivable digital' => 'texto:digital no-archivable',
    'text:unpublished' => 'texto:no-publicado',
    'text:Word' => 'texto:Word',
    'text:WordPerfect' => 'texto:WordPerfect',
    'unknown' => 'desconocido',
    'video:cassette' => 'video:casette',
  );
  $english = $form_state['values']['physicalDescription']['original_medium_eng'];
  $spanish = array_key_exists($english, $mapping) ? $mapping[$english] : $english;
  form_set_value($element, $spanish, $form_state);
}

/**
 * Implements hook_cmodel_pid_dsid_islandora_datastream_alter().
 */
function utailla_ailla_contributorCModel_MADS_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array $context) {
  if ($context['action'] == 'ingest' || $context['action'] == 'modify') {
    // See if the label needs to be updated.
    $mads_xml = $datastream->content;
    $dom = new DOMDocument();
    $dom->loadXML($mads_xml);
    $xpath = new DOMXPath($dom);
    $xpath->registerNamespace('mads', 'http://www.loc.gov/mads/v2');
    $first_name = $xpath->evaluate('string(/mads:mads/mads:authority/mads:name[@type="personal"]/mads:namePart[@type="given"]/text())');
    $last_name = $xpath->evaluate('string(/mads:mads/mads:authority/mads:name[@type="personal"]/mads:namePart[@type="family"]/text())');
    if (!empty($first_name) || !empty($last_name)) {
      $label = '';
      if (!empty($first_name) && empty($last_name)) {
        $label = $first_name;
      }
      elseif (empty($first_name) && !empty($last_name)) {
        $label = $last_name;
      }
      elseif (!empty($first_name) && !empty($last_name)) {
        $label = "{$last_name}, {$first_name}";
      }
      if ($object->label != $label) {
        $object->label = $label;
      }
    }
  }
}

/**
 * Implements hook_islandora_solr_query_alter().
 */
function utailla_islandora_solr_query_alter($qp) {
  $object = menu_get_object('islandora_object', 2);
  // Only want to modify from the default sort in the case of the collection
  // view search results.
  if ($object && current_path() == "islandora/object/{$object->id}" && in_array('islandora:collectionCModel', $object->models)) {
    $qp->solrParams['sort'] = 'fgs_label_ss asc';
  }
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function utailla_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, &$context) {
  $mads_cmodels = array(
    'ailla:countryCModel',
    'ailla:contributorCModel',
    'ailla:organizationCModel',
  );
  // Add PID to the MADS record.
  if ($context['action'] == 'ingest' && $datastream->id == 'MADS' && array_intersect($object->models, $mads_cmodels)) {
    if (isset($object['MADS'])) {
      $mads_dom = new DOMDocument();
      $mads_dom->loadXML($object['MADS']->content);
      $record_info = $mads_dom->createElement('recordInfo');
      $record_identifier = $mads_dom->createElement('recordIdentifier', $object->id);
      $record_info->appendChild($record_identifier);
      $mads_dom->documentElement->appendChild($record_info);
      $object['MADS']->content = $mads_dom->saveXML();
    }
  }
}


/**
 * Implements hook_islandora_ingest_steps_CMODEL_PID().
 */
function utailla_islandora_collectionCModel_islandora_ingest_steps($form_state) {
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  // As AILLA has custom requirements for applying a specific COLLECTION_POLICY
  // we need to add a step that will add it. This route is being used as opposed
  // to an object_ingested or alter implementation to mitigate any potential
  // fallout that could occur when interacting with the sleep mechanisms
  // currently in place in their migration.
  if ($shared_storage['parent'] == 'ailla:collection_collection') {
    return array(
      'utailla_collection_policy' => array(
        'type' => 'callback',
        'weight' => -11,
        'module' => 'utailla',
        'do_function' => array(
          'function' => 'utailla_apply_collection_policy',
          'args' => array($form_state),
        ),
      ),
    );
  }
}

/**
 * Implements hook_islandora_ingest_steps_CMODEL_PID_alter().
 */
function utailla_islandora_collectionCModel_islandora_ingest_steps_alter(&$steps, &$form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if ($shared_storage['parent'] == 'ailla:collection_collection' && isset($steps['islandora_basic_collection'])) {
    unset($steps['islandora_basic_collection']);
  }
}

/**
 * Callback to add AILLA's COLLECTION_POLICY to the collection object.
 *
 * @param array $form_state
 *   An array containing the Drupal form state.
 */
function utailla_apply_collection_policy(&$form_state) {
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  $module_path = drupal_get_path('module', 'utailla');
  $object = islandora_ingest_form_get_object($form_state);
  $ds = $object->constructDatastream('COLLECTION_POLICY', 'M');
  $ds->mimetype = 'application/xml';
  $ds->label = 'Collection policy';
  $ds->setContentFromFile("$module_path/xml/resource_collection_policy.xml", FALSE);
  $object->ingestDatastream($ds);
}

/**
 * Callback to remove AILLA's COLLECTION_POLICY from the collection object.
 *
 * @param array $form_state
 *   An array containing the Drupal form state.
 */
function utailla_undo_collection_policy(&$form_state) {
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  $object = islandora_ingest_form_get_object($form_state);
  if (isset($object['COLLECTION_POLICY'])) {
    $object->purgeDatastream('COLLECTION_POLICY');
  }
}

/**
 * Determine whether to display the "Add a resource" action.
 *
 * @param AbstractObject $resource
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 *
 * @see islandora_basic_collection_ingest_access()
 */
function utailla_resource_ingest_access(AbstractObject $resource) {
  $is_a_resource = in_array('ailla:resourceCModel', $resource->models) && isset($resource['COLLECTION_POLICY']);

  if (!$is_a_resource) {
    return FALSE;
  }

  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc', 'utailla', 'includes/ingest.form');
  $configuration = utailla_resource_get_ingest_configuration($resource);
  $has_ingest_steps = islandora_ingest_can_display_ingest_form($configuration);

  return $has_ingest_steps && islandora_object_access(ISLANDORA_INGEST, $resource);
}

/**
 * Implements hook_menu_alter().
 */
function utailla_menu_alter(&$items) {
  $items['islandora/object/%islandora_object/manage/collection']['page callback'] = 'utailla_manage_collection_and_resource_object';
  $items['islandora/object/%islandora_object/manage/collection']['access callback'] = 'utailla_collection_and_resource_manage_access';
  unset($items['islandora/object/%islandora_object/manage/collection']['file']);
}

/**
 * Access check for rendering the collection tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function utailla_collection_and_resource_manage_access(AbstractObject $object) {
  return array_intersect(array('islandora:collectionCModel', 'ailla:resourceCModel'), $object->models) && (islandora_object_access(ISLANDORA_BASIC_COLLECTION_MANAGE_COLLECTION_POLICY, $object) ||
    islandora_object_access(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS, $object) ||
    islandora_object_access(ISLANDORA_INGEST, $object) ||
    islandora_object_access(ISLANDORA_PURGE, $object));
}

/**
 * Wrapper for the management page for collections/resource.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return array
 *   An array containing the collection/resource management to be rendered.
 */
function utailla_manage_collection_and_resource_object(AbstractObject $object) {
  global $user;
  module_load_include('inc', 'islandora_basic_collection', 'includes/manage_collection');
  $data = islandora_basic_collection_manage_object($object);

  // AILLA's resources act like collection so let's do some custom checking
  // and toggle access as needed.
  if (in_array('ailla:resourceCModel', $object->models)) {
    // May same redundant but need to do it this way unfortunately.
    $policy_management_access = islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['COLLECTION_POLICY'], $user);
    $data['manage_collection_object']['policy_management']['#access'] = $policy_management_access;
    if ($policy_management_access) {
      $data['manage_collection_object']['policy_management']['form'] = drupal_get_form('islandora_basic_collection_policy_management_form', $object);
    }

    $share_migrate_children_access = islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['RELS-EXT'], $user);
    $data['manage_collection_object']['share_children']['#access'] = $share_migrate_children_access;
    $data['manage_collection_object']['migrate_children']['#access'] = $share_migrate_children_access;
    if ($share_migrate_children_access) {
      $data['manage_collection_object']['share_children']['form'] = drupal_get_form('islandora_basic_collection_share_children_form', $object);
      $data['manage_collection_object']['migrate_children']['form'] = drupal_get_form('islandora_basic_collection_migrate_children_form', $object);
    }
  }
  return $data;
}
